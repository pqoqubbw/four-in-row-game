{"version":3,"sources":["components/PlayersList.tsx","components/ResetButton.tsx","components/NextPlayer.tsx","components/DrawBoard.tsx","constans.ts","components/GameView.tsx","FourInRowStrategy/FourInRow.ts","App.tsx","index.tsx"],"names":["PlayersList","game","players","map","player","index","name","sign","ResetButton","clearBoard","clearField","children","className","onClick","NextPlayerView","currentPlayerIndex","useState","nextPlayer","setNextPlayer","useEffect","DrawBoard","board","isError","handleClick","idCell","trElement","x","symbol","y","id","String","tabIndex","defaultProps","console","error","Error","React","subscribeActions","memo","FieldView","field","size","setBoard","setIsError","winnerName","setWinnerName","showWin","winner","setViewBoard","useCallback","i","state","Array","fill","event","subscribe","move","makeMove","update","updateCell","win","draw","events","NextPlayer","gameInfo","playersList","isFinished","trigger","winCombinations","FourInRow","getName","checkWin","cells","slice","flat","isWinCombinations","some","line","setPlayerToken","tokens","setValue","playerId","isTurnValid","symbolThanTableFilled","Strategy","fourInRow","Game","strategy","fieldSize","App","GameView","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf81fe04.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { IPlayerView } from '../@types';\r\n\r\nconst PlayersList: React.FC<IPlayerView> = ({ game }) => {\r\n  return (\r\n    <>\r\n      {game.players &&\r\n        game.players.map((player: { name: string; sign: string }, index: number) => (\r\n          <div key={index}>\r\n            <h3>\r\n              {player.name}: \"{player.sign}\"\r\n            </h3>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayersList;\r\n","import React from 'react';\r\n\r\nimport { IResetButton } from '../@types';\r\n\r\nconst ResetButton: React.FC<IResetButton> = ({ clearBoard, clearField, children }) => {\r\n  const handleClick = () => {\r\n    clearBoard(0);\r\n    clearField();\r\n  };\r\n\r\n  return (\r\n    <button className='clearButton' onClick={handleClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetButton;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { INextPlayerView } from '../@types';\r\n\r\nconst NextPlayerView: React.FC<INextPlayerView> = ({ currentPlayerIndex, players }) => {\r\n  const [nextPlayer, setNextPlayer] = useState('');\r\n\r\n  useEffect(() => {\r\n    setNextPlayer(players[currentPlayerIndex]);\r\n  }, [currentPlayerIndex, players]);\r\n\r\n  return <div className='nextPlayer'>Next Player: {nextPlayer}</div>;\r\n};\r\n\r\nexport default NextPlayerView;\r\n","import React from 'react';\r\n\r\nimport { IDrawBoardProps } from '../@types';\r\n\r\nconst DrawBoard: React.FC<IDrawBoardProps> = ({ board, isError, handleClick }) => {\r\n  let idCell = 0;\r\n\r\n  return (\r\n    <>\r\n      {!board ? (\r\n        <div>something goes wrong, sorry!</div>\r\n      ) : (\r\n        <table className='table-bordered'>\r\n          <tbody>\r\n            {board.map((trElement: (string | null)[], x: number) => (\r\n              <tr key={idCell}>\r\n                {trElement &&\r\n                  trElement.map((symbol: string | null, y: number) => (\r\n                    <td\r\n                      key={idCell}\r\n                      className={`cell ${isError ? 'error' : ''} ${symbol ? `${symbol}` : ''}`}\r\n                      id={String(idCell++)}\r\n                      tabIndex={1}\r\n                      onClick={() => handleClick({ x, y })}>\r\n                      {symbol}\r\n                    </td>\r\n                  ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nDrawBoard.defaultProps = {\r\n  board: [\r\n    [null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null],\r\n    [null, null, null, null, null, null, null],\r\n  ],\r\n  isError: false,\r\n  handleClick: () => console.error(new Error(\"Draw Board must have a props ' handleClick() '\")),\r\n};\r\n\r\nexport default React.memo(DrawBoard);\r\n","export const FourInRow = 'FourInRow';\r\n\r\nexport enum subscribeActions {\r\n  move = 'move',\r\n  update = 'update',\r\n  win = 'win',\r\n  draw = 'draw',\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport ResetButton from './ResetButton';\r\nimport NextPlayer from './NextPlayer';\r\nimport DrawBoard from './DrawBoard';\r\n\r\nimport { IFieldViewProps, IUpdateData } from 'game-core/dist/@types/types';\r\nimport { IPlayerView } from '../@types';\r\n\r\nimport { subscribeActions } from '../constans';\r\n\r\nconst FieldView: React.FC<IPlayerView> = ({ game }) => {\r\n  const { x, y } = game.field.size;\r\n\r\n  const [board, setBoard] = useState<(string | null)[][]>([]);\r\n  const [isError, setIsError] = useState(false);\r\n  const [winnerName, setWinnerName] = useState('');\r\n\r\n  const showWin = (winner: string): void => {\r\n    setWinnerName(winner);\r\n  };\r\n\r\n  const setViewBoard = useCallback((): void => {\r\n    setBoard([]);\r\n    for (let i = 0; i < x; ++i) {\r\n      setBoard((state) => [...state, new Array(y).fill(null)]);\r\n    }\r\n  }, [x, y]);\r\n\r\n  useEffect(() => {\r\n    setViewBoard();\r\n\r\n    game.event.subscribe(subscribeActions.move, ({ x, y }: IFieldViewProps) =>\r\n      game.makeMove({ x, y })\r\n    );\r\n    game.event.subscribe(subscribeActions.update, ({ x, y, sign }: IUpdateData) =>\r\n      updateCell({ x, y, sign })\r\n    );\r\n    game.event.subscribe(subscribeActions.win, (winner: string) => showWin(winner));\r\n    game.event.subscribe(subscribeActions.draw, (winner: string) => showWin(winner));\r\n\r\n    return () => {\r\n      clearField();\r\n      game.clearBoard(0);\r\n      game.event.events = {};\r\n    };\r\n  }, [game]);\r\n\r\n  const updateCell = ({ x, y, sign }: IUpdateData) => {\r\n    setBoard((state): (string | null)[][] => {\r\n      for (let i = 5; i >= 0; i--) {\r\n        if (state[i][y] === null) {\r\n          state[i][y] = sign;\r\n          break;\r\n        }\r\n      }\r\n      return [...state];\r\n    });\r\n  };\r\n\r\n  const clearField = (): void => {\r\n    setViewBoard();\r\n    setWinnerName('');\r\n    setIsError(false);\r\n  };\r\n\r\n  const handleClick = ({ x, y }: IFieldViewProps) => {\r\n    if (!board[x][y] && !game.isFinished) {\r\n      setIsError(false);\r\n      game.event.trigger(subscribeActions.move, { x, y });\r\n    } else {\r\n      setIsError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NextPlayer\r\n        players={game.gameInfo.playersList}\r\n        currentPlayerIndex={game.currentPlayerIndex}\r\n      />\r\n      <DrawBoard board={board} isError={isError} handleClick={handleClick} />\r\n      <ResetButton clearBoard={() => game.clearBoard(0)} clearField={clearField}>\r\n        reset game\r\n      </ResetButton>\r\n      <div className='winnerText'>{game.isFinished ? `${winnerName} wins` : ''}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(FieldView);\r\n","import { Strategy } from 'game-core';\r\nimport { IPlayersInfo, TableFilledSymbolType } from 'game-core/dist/@types/types';\r\n\r\nconst winCombinations = [\r\n  [0, 1, 2, 3],\r\n  [41, 40, 39, 38],\r\n  [7, 8, 9, 10],\r\n  [34, 33, 32, 31],\r\n  [14, 15, 16, 17],\r\n  [27, 26, 25, 24],\r\n  [21, 22, 23, 24],\r\n  [20, 19, 18, 17],\r\n  [28, 29, 30, 31],\r\n  [13, 12, 11, 10],\r\n  [35, 36, 37, 38],\r\n  [6, 5, 4, 3],\r\n  [0, 7, 14, 21],\r\n  [41, 34, 27, 20],\r\n  [1, 8, 15, 22],\r\n  [40, 33, 26, 19],\r\n  [2, 9, 16, 23],\r\n  [39, 32, 25, 18],\r\n  [3, 10, 17, 24],\r\n  [38, 31, 24, 17],\r\n  [4, 11, 18, 25],\r\n  [37, 30, 23, 16],\r\n  [5, 12, 19, 26],\r\n  [36, 29, 22, 15],\r\n  [6, 13, 20, 27],\r\n  [35, 28, 21, 14],\r\n  [0, 8, 16, 24],\r\n  [41, 33, 25, 17],\r\n  [7, 15, 23, 31],\r\n  [34, 26, 18, 10],\r\n  [14, 22, 30, 38],\r\n  [27, 19, 11, 3],\r\n  [35, 29, 23, 17],\r\n  [6, 12, 18, 24],\r\n  [28, 22, 16, 10],\r\n  [13, 19, 25, 31],\r\n  [21, 15, 9, 3],\r\n  [20, 26, 32, 38],\r\n  [36, 30, 24, 18],\r\n  [5, 11, 17, 23],\r\n  [37, 31, 25, 19],\r\n  [4, 10, 16, 22],\r\n  [2, 10, 18, 26],\r\n  [39, 31, 23, 15],\r\n  [1, 9, 17, 25],\r\n  [40, 32, 24, 16],\r\n  [9, 17, 25, 33],\r\n  [8, 16, 24, 32],\r\n  [11, 17, 23, 29],\r\n  [12, 18, 24, 30],\r\n  [1, 2, 3, 4],\r\n  [5, 4, 3, 2],\r\n  [8, 9, 10, 11],\r\n  [12, 11, 10, 9],\r\n  [15, 16, 17, 18],\r\n  [19, 18, 17, 16],\r\n  [22, 23, 24, 25],\r\n  [26, 25, 24, 23],\r\n  [29, 30, 31, 32],\r\n  [33, 32, 31, 30],\r\n  [36, 37, 38, 39],\r\n  [40, 39, 38, 37],\r\n  [7, 14, 21, 28],\r\n  [8, 15, 22, 29],\r\n  [9, 16, 23, 30],\r\n  [10, 17, 24, 31],\r\n  [11, 18, 25, 32],\r\n  [12, 19, 26, 33],\r\n  [13, 20, 27, 34],\r\n];\r\n\r\nclass FourInRow extends Strategy {\r\n  getName = (): string => 'FourInRow';\r\n\r\n  checkWin = (board: TableFilledSymbolType[][] = []): boolean => {\r\n    const cells = board?.slice().flat();\r\n\r\n    const isWinCombinations = winCombinations.some(\r\n      (line) =>\r\n        cells[line[0]] &&\r\n        cells[line[0]] === cells[line[1]] &&\r\n        cells[line[1]] === cells[line[2]] &&\r\n        cells[line[2]] === cells[line[3]]\r\n    );\r\n\r\n    if (isWinCombinations) return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  setPlayerToken = (players: string[]): IPlayersInfo[] => {\r\n    const tokens = ['turquoise', 'orange'];\r\n    return players?.slice().map((player: string | IPlayersInfo, i: number): IPlayersInfo => {\r\n      let currentPlayer = player;\r\n      currentPlayer = { name: player, sign: tokens[i] } as IPlayersInfo;\r\n\r\n      return currentPlayer;\r\n    });\r\n  };\r\n\r\n  setValue = (board: TableFilledSymbolType[][], x: number, y: number, playerId: number): void => {\r\n    for (let i = 5; i >= 0; i--) {\r\n      if (board[i][y] === 0) {\r\n        board[i][y] = playerId + 1;\r\n        this.isTurnValid(board, i, y, 0);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  isTurnValid = (\r\n    board: TableFilledSymbolType[][],\r\n    x: number,\r\n    y: number,\r\n    symbolThanTableFilled: TableFilledSymbolType\r\n  ): boolean => board[x][y] === symbolThanTableFilled;\r\n}\r\nexport default FourInRow;\r\n","import React from 'react';\r\nimport { Game } from 'game-core';\r\n\r\nimport PlayersList from './components/PlayersList';\r\nimport GameView from './components/GameView';\r\n\r\nimport FourInRow from './FourInRowStrategy/FourInRow';\r\n\r\nimport './App.css';\r\n\r\nconst fourInRow = new Game({\r\n  playersList: ['Jackson', 'Alex'],\r\n  strategy: new FourInRow(),\r\n  fieldSize: { x: 6, y: 7 },\r\n});\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className='App'>\r\n      <div>\r\n        <h1>FourInRow Game</h1>\r\n      </div>\r\n      <GameView game={fourInRow} />\r\n      <PlayersList game={fourInRow} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}