{"version":3,"sources":["components/PlayersList.tsx","components/ResetButton.tsx","components/NextPlayer.tsx","components/DrawBoard.tsx","components/GameView.tsx","App.tsx","index.tsx"],"names":["PlayersList","game","players","map","player","index","name","sign","ResetButton","clearBoard","clearField","children","className","onClick","NextPlayerView","currentPlayerIndex","useState","nextPlayer","setNextPlayer","useEffect","DrawBoard","board","idCell","isError","handleClick","trElement","x","symbol","y","id","String","tabIndex","defaultProps","console","error","Error","React","memo","FieldView","field","size","setBoard","setIsError","winnerName","setWinnerName","showWin","winner","setViewBoard","useCallback","i","state","Array","fill","on","subscribe","makeMove","updateCell","NextPlayer","gameInfo","playersList","isFinished","trigger","Game","strategy","TicTacToe","fieldSize","App","GameView","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afe03727.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { IPlayerView } from '../@types';\r\n\r\nconst PlayersList: React.FC<IPlayerView> = ({ game }) => {\r\n  return (\r\n    <>\r\n      {game.players &&\r\n        game.players.map((player: { name: string; sign: string }, index: number) => (\r\n          <div key={index}>\r\n            <h3>\r\n              {player.name}: \"{player.sign}\"\r\n            </h3>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayersList;\r\n","import React from 'react';\r\n\r\nimport { IResetButton } from '../@types';\r\n\r\nconst ResetButton: React.FC<IResetButton> = ({ clearBoard, clearField, children }) => {\r\n  const handleClick = () => {\r\n    clearBoard(0);\r\n    clearField();\r\n  };\r\n\r\n  return (\r\n    <button className='clearButton' onClick={handleClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetButton;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { INextPlayerView } from '../@types';\r\n\r\nconst NextPlayerView: React.FC<INextPlayerView> = ({ currentPlayerIndex, players }) => {\r\n  const [nextPlayer, setNextPlayer] = useState('');\r\n\r\n  useEffect(() => {\r\n    setNextPlayer(players[currentPlayerIndex]);\r\n  }, [currentPlayerIndex, players]);\r\n\r\n  return <div className='nextPlayer'>Next Player: {nextPlayer}</div>;\r\n};\r\n\r\nexport default NextPlayerView;\r\n","import React from 'react';\r\n\r\nconst DrawBoard: React.FC<any> = ({ board, idCell, isError, handleClick }) => {\r\n  return (\r\n    <>\r\n      {board &&\r\n        board.map((trElement: (string | null)[], x: number) => (\r\n          <tr key={idCell}>\r\n            {trElement &&\r\n              trElement.map((symbol: string | null, y: number) => (\r\n                <td\r\n                  key={idCell}\r\n                  className={`cell ${isError ? 'error' : ''}`}\r\n                  id={String(idCell++)}\r\n                  tabIndex={1}\r\n                  onClick={() => handleClick({ x, y })}>\r\n                  {symbol}\r\n                </td>\r\n              ))}\r\n          </tr>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nDrawBoard.defaultProps = {\r\n  board: [\r\n    [null, null, null],\r\n    [null, null, null],\r\n    [null, null, null],\r\n  ],\r\n  idCell: 0,\r\n  isError: false,\r\n  handleClick: () => console.error(new Error(\"Draw Board must have a props ' handleClick() '\")),\r\n};\r\n\r\nexport default React.memo(DrawBoard);\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport ResetButton from './ResetButton';\r\nimport NextPlayer from './NextPlayer';\r\nimport DrawBoard from './DrawBoard';\r\n\r\nimport { IFieldViewProps, IUpdateData } from 'game-core/dist/@types/types';\r\nimport { IPlayerView } from '../@types';\r\n\r\nconst FieldView: React.FC<IPlayerView> = ({ game }) => {\r\n  const { x, y } = game.field.size;\r\n  const [board, setBoard] = useState<(string | null)[][]>([]);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const [winnerName, setWinnerName] = useState('');\r\n  const showWin = (winner: string): void => {\r\n    setWinnerName(winner);\r\n  };\r\n\r\n  const setViewBoard = useCallback((): void => {\r\n    setBoard([]);\r\n    for (let i = 0; i < x; ++i) {\r\n      setBoard((state) => [...state, new Array(y).fill(null)]);\r\n    }\r\n  }, [x, y]);\r\n\r\n  useEffect(() => {\r\n    setViewBoard();\r\n\r\n    game.on.subscribe('move', ({ x, y }) => game.makeMove({ x, y }));\r\n    game.on.subscribe('update', ({ x, y, sign }: IUpdateData) => updateCell({ x, y, sign }));\r\n    game.on.subscribe('win', (winner: string) => showWin(winner));\r\n    game.on.subscribe('draw', (winner: string) => showWin(winner));\r\n  }, [game, game.on, setViewBoard]);\r\n\r\n  const updateCell = ({ x, y, sign }: IUpdateData) => {\r\n    setBoard((state) => {\r\n      state[x][y] = sign;\r\n      return [...state];\r\n    });\r\n  };\r\n\r\n  const errorMove = (): void => {\r\n    setIsError(true);\r\n  };\r\n\r\n  const clearField = () => {\r\n    setViewBoard();\r\n    setWinnerName('');\r\n    setIsError(false);\r\n  };\r\n\r\n  const handleClick = ({ x, y }: IFieldViewProps) => {\r\n    if (!board[x][y] && !game.isFinished) {\r\n      setIsError(false);\r\n      game.on.trigger('move', { x, y });\r\n    } else {\r\n      errorMove();\r\n    }\r\n  };\r\n\r\n  let idCell = 0;\r\n  return (\r\n    <>\r\n      <NextPlayer\r\n        players={game.gameInfo.playersList}\r\n        currentPlayerIndex={game.currentPlayerIndex}\r\n      />\r\n      <table className='table-bordered'>\r\n        <tbody>\r\n          <DrawBoard board={board} idCell={idCell} isError={isError} handleClick={handleClick} />\r\n        </tbody>\r\n      </table>\r\n      <ResetButton clearBoard={() => game.clearBoard(0)} clearField={clearField}>\r\n        reset game\r\n      </ResetButton>\r\n      <div className='winnerText'>{game.isFinished ? `${winnerName} wins` : ''}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(FieldView);\r\n","import React from 'react';\nimport { Game, TicTacToe } from 'game-core';\n\nimport PlayersList from './components/PlayersList';\nimport GameView from './components/GameView';\n\nimport './App.css';\n\nconst game = new Game({\n  playersList: ['Jackson', 'Alex'],\n  strategy: new TicTacToe(),\n  fieldSize: { x: 3, y: 3 },\n});\n\nconst App: React.FC = () => {\n  return (\n    <div className='App'>\n      <>\n        <GameView game={game} />\n        <PlayersList game={game} />\n      </>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}