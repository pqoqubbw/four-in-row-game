{"version":3,"sources":["components/PlayersList.tsx","components/ResetButton.tsx","components/NextPlayer.tsx","components/DrawBoard.tsx","components/GameView.tsx","FourInRowStrategy/FourInRow.ts","App.tsx","index.tsx"],"names":["PlayersList","game","players","map","player","index","name","sign","ResetButton","clearBoard","clearField","children","className","onClick","NextPlayerView","currentPlayerIndex","useState","nextPlayer","setNextPlayer","useEffect","DrawBoard","board","isError","handleClick","idCell","value","trElement","x","symbol","y","id","String","tabIndex","defaultProps","console","error","Error","React","memo","FieldView","field","size","setBoard","setIsError","winnerName","setWinnerName","showWin","winner","setViewBoard","useCallback","i","state","Array","fill","on","subscribe","makeMove","updateCell","events","ticTacToeUpdateCell","gameInfo","strategy","getName","fourInRowUpdateCell","NextPlayer","playersList","isFinished","trigger","FourInRow","checkWin","winCombinations","cells","slice","flat","isWinCombinations","some","line","setPlayerToken","tokens","setValue","playerId","isTurnValid","symbolThanTableFilled","Strategy","ticTacToe","Game","TicTacToe","fieldSize","fourInRow","App","isTicTacToe","setTicTacToe","isFourInRow","setFourInRow","onChange","e","target","handleChange","GameView","ReactDOM","render","document","getElementById"],"mappings":"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ACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,GACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,EAAG,GACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,GAAI,GAAI,GAAI,GACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,GAAI,GAAI,GAAI,KAGTC,EAAK,OAAGlD,QAAH,IAAGA,OAAH,EAAGA,EAAOmD,QAAQC,OAEvBC,EAAoBJ,EAAgBK,MACxC,SAACC,GAAD,OACEL,EAAMK,EAAK,KACXL,EAAMK,EAAK,MAAQL,EAAMK,EAAK,KAC9BL,EAAMK,EAAK,MAAQL,EAAMK,EAAK,KAC9BL,EAAMK,EAAK,MAAQL,EAAMK,EAAK,OAGlC,QAAIF,G,EAKNG,eAAiB,SAAC3E,GAChB,IAAM4E,EAAS,CAAC,YAAa,UAC7B,cAAO5E,QAAP,IAAOA,OAAP,EAAOA,EAASsE,QAAQrE,KAAI,SAACC,EAA+B8C,GAI1D,MAFgB,CAAE5C,KAAMF,EAAQG,KAAMuE,EAAO5B,Q,EAMjD6B,SAAW,SAAC1D,EAAkCM,EAAWE,EAAWmD,GAClE,IAAK,IAAI9B,EAAI,EAAGA,GAAK,EAAGA,IACtB,GAAoB,IAAhB7B,EAAM6B,GAAGrB,GAAU,CACrBR,EAAM6B,GAAGrB,GAAKmD,EAAW,EACzB,EAAKC,YAAY5D,EAAO6B,EAAGrB,EAAG,GAC9B,Q,EAKNoD,YAAc,SACZ5D,EACAM,EACAE,EACAqD,GAJY,OAKA7D,EAAMM,GAAGE,KAAOqD,G,YApHRC,KCOlBC,G,MAAY,IAAIC,IAAK,CACzBpB,YAAa,CAAC,UAAW,QACzBJ,SAAU,IAAIyB,IACdC,UAAW,CAAE5D,EAAG,EAAGE,EAAG,MAGlB2D,EAAY,IAAIH,IAAK,CACzBpB,YAAa,CAAC,UAAW,QACzBJ,SAAU,IAAIO,EACdmB,UAAW,CAAE5D,EAAG,EAAGE,EAAG,KAiDT4D,EA9CO,WACpB,MAAoCzE,oBAAS,GAA7C,mBAAO0E,EAAP,KAAoBC,EAApB,KACA,EAAoC3E,oBAAS,GAA7C,mBAAO4E,EAAP,KAAoBC,EAApB,KAqBA,OACE,sBAAKjF,UAAU,MAAf,UACE,yBAAQkF,SAAU,SAACC,GAAD,OArBD,SAACA,GACpB,OAAQA,EAAEC,OAAOvE,OACf,IAAK,YACHkE,GAAa,GACbE,GAAa,GACb,MAEF,IAAK,YACHF,GAAa,GACbE,GAAa,GACb,MAEF,QACEF,GAAa,GACbE,GAAa,IAOUI,CAAaF,IAAtC,UACE,wBAAQtE,MAAM,SAAd,yBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,YAAd,0BAEDiE,GACC,qCACE,cAACQ,EAAD,CAAUjG,KAAMmF,IAChB,cAAC,EAAD,CAAanF,KAAMmF,OAGtBQ,GACC,qCACE,cAACM,EAAD,CAAUjG,KAAMuF,IAChB,cAAC,EAAD,CAAavF,KAAMuF,WCxD7BW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d2ef0252.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { IPlayerView } from '../@types';\r\n\r\nconst PlayersList: React.FC<IPlayerView> = ({ game }) => {\r\n  return (\r\n    <>\r\n      {game.players &&\r\n        game.players.map((player: { name: string; sign: string }, index: number) => (\r\n          <div key={index}>\r\n            <h3>\r\n              {player.name}: \"{player.sign}\"\r\n            </h3>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayersList;\r\n","import React from 'react';\r\n\r\nimport { IResetButton } from '../@types';\r\n\r\nconst ResetButton: React.FC<IResetButton> = ({ clearBoard, clearField, children }) => {\r\n  const handleClick = () => {\r\n    clearBoard(0);\r\n    clearField();\r\n  };\r\n\r\n  return (\r\n    <button className='clearButton' onClick={handleClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ResetButton;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { INextPlayerView } from '../@types';\r\n\r\nconst NextPlayerView: React.FC<INextPlayerView> = ({ currentPlayerIndex, players }) => {\r\n  const [nextPlayer, setNextPlayer] = useState('');\r\n\r\n  useEffect(() => {\r\n    setNextPlayer(players[currentPlayerIndex]);\r\n  }, [currentPlayerIndex, players]);\r\n\r\n  return <div className='nextPlayer'>Next Player: {nextPlayer}</div>;\r\n};\r\n\r\nexport default NextPlayerView;\r\n","import React from 'react';\r\n\r\nconst DrawBoard: React.FC<any> = ({ board, isError, handleClick, value }) => {\r\n  let idCell = 0;\r\n\r\n  return (\r\n    <>\r\n      {board &&\r\n        board.map((trElement: (string | null)[], x: number) => (\r\n          <tr key={idCell}>\r\n            {trElement &&\r\n              trElement.map((symbol: string | null, y: number) => (\r\n                <td\r\n                  key={idCell}\r\n                  className={`cell ${isError ? 'error' : ''} ${symbol ? `${symbol}` : ''}`}\r\n                  id={String(idCell++)}\r\n                  tabIndex={1}\r\n                  onClick={() => handleClick({ x, y })}>\r\n                  {symbol}\r\n                </td>\r\n              ))}\r\n          </tr>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nDrawBoard.defaultProps = {\r\n  board: [\r\n    [null, null, null],\r\n    [null, null, null],\r\n    [null, null, null],\r\n  ],\r\n  isError: false,\r\n  handleClick: () => console.error(new Error(\"Draw Board must have a props ' handleClick() '\")),\r\n};\r\n\r\nexport default React.memo(DrawBoard);\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport ResetButton from './ResetButton';\r\nimport NextPlayer from './NextPlayer';\r\nimport DrawBoard from './DrawBoard';\r\n\r\nimport { IFieldViewProps, IUpdateData } from 'game-core/dist/@types/types';\r\nimport { IPlayerView } from '../@types';\r\n\r\nconst FieldView: React.FC<IPlayerView> = ({ game }) => {\r\n  const { x, y } = game.field.size;\r\n\r\n  const [board, setBoard] = useState<(string | null)[][]>([]);\r\n  const [isError, setIsError] = useState(false);\r\n  const [winnerName, setWinnerName] = useState('');\r\n\r\n  const showWin = (winner: string): void => {\r\n    setWinnerName(winner);\r\n  };\r\n\r\n  const setViewBoard = useCallback((): void => {\r\n    setBoard([]);\r\n    for (let i = 0; i < x; ++i) {\r\n      setBoard((state) => [...state, new Array(y).fill(null)]);\r\n    }\r\n  }, [x, y]);\r\n\r\n  useEffect(() => {\r\n    setViewBoard();\r\n\r\n    game.on.subscribe('move', ({ x, y }) => game.makeMove({ x, y }));\r\n    game.on.subscribe('update', ({ x, y, sign }: IUpdateData) => updateCell({ x, y, sign }));\r\n    game.on.subscribe('win', (winner: string) => showWin(winner));\r\n    game.on.subscribe('draw', (winner: string) => showWin(winner));\r\n\r\n    return () => {\r\n      clearField();\r\n      game.clearBoard(0);\r\n      game.on.events = {};\r\n    };\r\n  }, [game]);\r\n\r\n  const ticTacToeUpdateCell = ({ x, y, sign }: IUpdateData): void => {\r\n    setBoard((state): (string | null)[][] => {\r\n      state[x][y] = sign;\r\n      return [...state];\r\n    });\r\n  };\r\n\r\n  const fourInRowUpdateCell = ({ x, y, sign }: IUpdateData): void => {\r\n    setBoard((state): (string | null)[][] => {\r\n      for (let i = 5; i >= 0; i--) {\r\n        if (state[i][y] === null) {\r\n          state[i][y] = sign;\r\n          break;\r\n        }\r\n      }\r\n      return [...state];\r\n    });\r\n  };\r\n\r\n  const updateCell = ({ x, y, sign }: IUpdateData) => {\r\n    switch (game.gameInfo.strategy.getName()) {\r\n      case 'TicTacToe':\r\n        ticTacToeUpdateCell({ x, y, sign });\r\n        break;\r\n\r\n      case 'FourInRow':\r\n        fourInRowUpdateCell({ x, y, sign });\r\n        break;\r\n\r\n      default:\r\n        ticTacToeUpdateCell({ x, y, sign });\r\n        break;\r\n    }\r\n  };\r\n\r\n  const errorMove = (): void => {\r\n    setIsError(true);\r\n  };\r\n\r\n  const clearField = () => {\r\n    setViewBoard();\r\n    setWinnerName('');\r\n    setIsError(false);\r\n  };\r\n\r\n  const handleClick = ({ x, y }: IFieldViewProps) => {\r\n    if (!board[x][y] && !game.isFinished) {\r\n      setIsError(false);\r\n      game.on.trigger('move', { x, y });\r\n    } else {\r\n      errorMove();\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <NextPlayer\r\n        players={game.gameInfo.playersList}\r\n        currentPlayerIndex={game.currentPlayerIndex}\r\n      />\r\n      <table className='table-bordered'>\r\n        <tbody>\r\n          <DrawBoard board={board} isError={isError} handleClick={handleClick} />\r\n        </tbody>\r\n      </table>\r\n      <ResetButton clearBoard={() => game.clearBoard(0)} clearField={clearField}>\r\n        reset game\r\n      </ResetButton>\r\n      <div className='winnerText'>{game.isFinished ? `${winnerName} wins` : ''}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(FieldView);\r\n","import { Strategy } from 'game-core';\r\nimport { IPlayersInfo, TableFilledSymbolType } from 'game-core/dist/@types/types';\r\n\r\nclass FourInRow extends Strategy {\r\n  getName = (): string => 'FourInRow';\r\n\r\n  checkWin = (board: TableFilledSymbolType[][] = []): boolean => {\r\n    const winCombinations = [\r\n      [0, 1, 2, 3],\r\n      [41, 40, 39, 38],\r\n      [7, 8, 9, 10],\r\n      [34, 33, 32, 31],\r\n      [14, 15, 16, 17],\r\n      [27, 26, 25, 24],\r\n      [21, 22, 23, 24],\r\n      [20, 19, 18, 17],\r\n      [28, 29, 30, 31],\r\n      [13, 12, 11, 10],\r\n      [35, 36, 37, 38],\r\n      [6, 5, 4, 3],\r\n      [0, 7, 14, 21],\r\n      [41, 34, 27, 20],\r\n      [1, 8, 15, 22],\r\n      [40, 33, 26, 19],\r\n      [2, 9, 16, 23],\r\n      [39, 32, 25, 18],\r\n      [3, 10, 17, 24],\r\n      [38, 31, 24, 17],\r\n      [4, 11, 18, 25],\r\n      [37, 30, 23, 16],\r\n      [5, 12, 19, 26],\r\n      [36, 29, 22, 15],\r\n      [6, 13, 20, 27],\r\n      [35, 28, 21, 14],\r\n      [0, 8, 16, 24],\r\n      [41, 33, 25, 17],\r\n      [7, 15, 23, 31],\r\n      [34, 26, 18, 10],\r\n      [14, 22, 30, 38],\r\n      [27, 19, 11, 3],\r\n      [35, 29, 23, 17],\r\n      [6, 12, 18, 24],\r\n      [28, 22, 16, 10],\r\n      [13, 19, 25, 31],\r\n      [21, 15, 9, 3],\r\n      [20, 26, 32, 38],\r\n      [36, 30, 24, 18],\r\n      [5, 11, 17, 23],\r\n      [37, 31, 25, 19],\r\n      [4, 10, 16, 22],\r\n      [2, 10, 18, 26],\r\n      [39, 31, 23, 15],\r\n      [1, 9, 17, 25],\r\n      [40, 32, 24, 16],\r\n      [9, 17, 25, 33],\r\n      [8, 16, 24, 32],\r\n      [11, 17, 23, 29],\r\n      [12, 18, 24, 30],\r\n      [1, 2, 3, 4],\r\n      [5, 4, 3, 2],\r\n      [8, 9, 10, 11],\r\n      [12, 11, 10, 9],\r\n      [15, 16, 17, 18],\r\n      [19, 18, 17, 16],\r\n      [22, 23, 24, 25],\r\n      [26, 25, 24, 23],\r\n      [29, 30, 31, 32],\r\n      [33, 32, 31, 30],\r\n      [36, 37, 38, 39],\r\n      [40, 39, 38, 37],\r\n      [7, 14, 21, 28],\r\n      [8, 15, 22, 29],\r\n      [9, 16, 23, 30],\r\n      [10, 17, 24, 31],\r\n      [11, 18, 25, 32],\r\n      [12, 19, 26, 33],\r\n      [13, 20, 27, 34],\r\n    ];\r\n\r\n    const cells = board?.slice().flat();\r\n\r\n    const isWinCombinations = winCombinations.some(\r\n      (line) =>\r\n        cells[line[0]] &&\r\n        cells[line[0]] === cells[line[1]] &&\r\n        cells[line[1]] === cells[line[2]] &&\r\n        cells[line[2]] === cells[line[3]]\r\n    );\r\n\r\n    if (isWinCombinations) return true;\r\n\r\n    return false;\r\n  };\r\n\r\n  setPlayerToken = (players: string[]): IPlayersInfo[] => {\r\n    const tokens = ['turquoise', 'orange'];\r\n    return players?.slice().map((player: string | IPlayersInfo, i: number): IPlayersInfo => {\r\n      let currentPlayer = player;\r\n      currentPlayer = { name: player, sign: tokens[i] } as IPlayersInfo;\r\n\r\n      return currentPlayer;\r\n    });\r\n  };\r\n\r\n  setValue = (board: TableFilledSymbolType[][], x: number, y: number, playerId: number): void => {\r\n    for (let i = 5; i >= 0; i--) {\r\n      if (board[i][y] === 0) {\r\n        board[i][y] = playerId + 1;\r\n        this.isTurnValid(board, i, y, 0);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  isTurnValid = (\r\n    board: TableFilledSymbolType[][],\r\n    x: number,\r\n    y: number,\r\n    symbolThanTableFilled: TableFilledSymbolType\r\n  ): boolean => board[x][y] === symbolThanTableFilled;\r\n}\r\nexport default FourInRow;\r\n","import React, { useState } from 'react';\nimport { Game, TicTacToe } from 'game-core';\n\nimport PlayersList from './components/PlayersList';\nimport GameView from './components/GameView';\n\nimport FourInRow from './FourInRowStrategy/FourInRow';\n\nimport './App.css';\n\nconst ticTacToe = new Game({\n  playersList: ['Jackson', 'Alex'],\n  strategy: new TicTacToe(),\n  fieldSize: { x: 3, y: 3 },\n});\n\nconst fourInRow = new Game({\n  playersList: ['Jackson', 'Alex'],\n  strategy: new FourInRow(),\n  fieldSize: { x: 6, y: 7 },\n});\n\nconst App: React.FC = () => {\n  const [isTicTacToe, setTicTacToe] = useState(false);\n  const [isFourInRow, setFourInRow] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (e.target.value) {\n      case 'TicTacToe':\n        setTicTacToe(true);\n        setFourInRow(false);\n        break;\n\n      case 'FourInRow':\n        setTicTacToe(false);\n        setFourInRow(true);\n        break;\n\n      default:\n        setTicTacToe(true);\n        setFourInRow(false);\n        break;\n    }\n  };\n\n  return (\n    <div className='App'>\n      <select onChange={(e) => handleChange(e)}>\n        <option value='select'>select game</option>\n        <option value='TicTacToe'>TicTacToe</option>\n        <option value='FourInRow'>FourInRow</option>\n      </select>\n      {isTicTacToe && (\n        <>\n          <GameView game={ticTacToe} />\n          <PlayersList game={ticTacToe} />\n        </>\n      )}\n      {isFourInRow && (\n        <>\n          <GameView game={fourInRow} />\n          <PlayersList game={fourInRow} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}